require 'minitest/autorun'
require_relative '../lib/vektor'

class VektorClassTests < Minitest::Test
    def test_vektor_new_without_args
        v1 = Vektor.new

        assert_instance_of(Vektor, v1)
        assert_equal([0, 0, 0], v1.to_a)
    end

    def test_vektor_new_with_args
        v1 = Vektor.new(1, 2, 3)

        assert_instance_of(Vektor, v1)
        assert_equal([1, 2, 3], v1.to_a)
    end

    def test_vektor_mul_with_scalar_positiv_01
        v_res_curr = Vektor.new(1, -5, 3) * 6
        v_res_valid = Vektor.new(6, -30, 18)

        assert_equal(v_res_curr, v_res_valid)
    end

    def test_vektor_mul_with_scalar_negativ_01
        v_res_curr = Vektor.new(1, -5, 3) * -3
        v_res_valid = Vektor.new(-3, 15, -9)

        assert_equal(v_res_curr, v_res_valid)
    end

    def test_vektor_mul_of_2vectors_01
        s_res_curr = Vektor.new(1, 2, 3) * Vektor.new(-7, 8, 9)
        s_res_valid = 36

        assert_equal(s_res_curr, s_res_valid)
    end

    def test_vektor_mul_of_2vectors_02
        s_res_curr = Vektor.new(-5, 9, 7) * Vektor.new(10, 3, 8)
        s_res_valid = 33

        assert_equal(s_res_curr, s_res_valid)
    end

    def test_vektor_add_01
        v_res_curr = Vektor.new(4, 0, 8) + Vektor.new(-1, 4, 7)
        v_res_valid = Vektor.new(3, 4, 15)

        assert_equal(v_res_curr, v_res_valid)
    end

    def test_vektor_add_02
        v_res_curr = Vektor.new(-1, 4, 7) + Vektor.new(4, 0, 8)
        v_res_valid = Vektor.new(3, 4, 15)

        assert_equal(v_res_curr, v_res_valid)
    end

    def test_vektor_sub_01
        v_res_curr = Vektor.new(4, 0, 8) - Vektor.new(-1, 4, 7)
        v_res_valid = Vektor.new(5, -4, 1)

        assert_equal(v_res_curr, v_res_valid)
    end

    def test_vektor_cross_product_01
        v_res_curr = Vektor.new(1, 2, 3) % Vektor.new(-7, 8, 9)
        v_res_valid = Vektor.new(-6, -30, 22)

        assert_equal(v_res_curr, v_res_valid)
    end

    def test_vektor_cross_product_02
        v_res_curr = Vektor.new(1, 2, 8) % Vektor.new(4, 3, 5)
        v_res_valid = Vektor.new(-14, 27, -5)

        assert_equal(v_res_curr, v_res_valid)
    end

    def test_vektor_magnitude_01
        v_res_curr = Vektor.new(1, 1, 1).mag
        v_res_valid = Math.sqrt(3)

        assert_equal(v_res_curr, v_res_valid)
    end

    def test_vektor_magnitude_02
        v_res_curr = Vektor.new(5, 4, 3).mag
        v_res_valid = Math.sqrt(50)

        assert_equal(v_res_curr, v_res_valid)
    end

	def test_vektor_collinearity_axis_aligned
		assert(!Vektor.new(0, 0, 0).collinear?(Vektor.new(0, 0, 0)))
		assert(Vektor.new(1, 0, 0).collinear?(Vektor.new(1, 0, 0)))
		assert(Vektor.new(0, 1, 0).collinear?(Vektor.new(0, 1, 0)))
		assert(Vektor.new(0, 0, 1).collinear?(Vektor.new(0, 0, 1)))
	end

    def test_vektor_collinearity_01
        v_res_curr = Vektor.new(4, 5, 7).collinear? Vektor.new(16, 20, 28)
        assert_equal(true, v_res_curr)
    end

    def test_vektor_collinearity_02
        v_res_curr = Vektor.new(4, 5, 7).collinear?(Vektor.new(16, 20, 21))
        assert_equal(false, v_res_curr)
    end

	def test_mokey_patch
		assert_equal(Vektor.new(6, -30, 18), 6 * Vektor.new(1, -5, 3))
		assert_equal(Vektor.new(-3, 15, -9), -3 * Vektor.new(1, -5, 3))
		assert_equal(6, 2 * 3)
		assert_equal(125, 5 * 5 * 5)
	end

	def test_complex_calc
		assert_equal(-31, (Vektor.new(-1, 5, -2) % Vektor.new(2, 1, 2)) * Vektor.new(2, 0, 5))
	end

	def test_raises_error_when_normalizing_0_vector
		assert_raises(ArgumentError) { Vektor.new.normalize }
	end

    # def test_vektor_complex_calc_01
    #     v_res_curr = Vektor.new(-1, 5, -2) - Vektor.new(2, 1, 2) + Vektor.new(5, -4, 1)
    #     v_res_valid = Vektor.new(2, 0, -3) # TODO: to check

    #     assert_equal(v_res_curr, v_res_valid)
    # end
end